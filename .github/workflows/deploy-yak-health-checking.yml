name: Deploy YAK Health Checking Service

on:
  # 当指定文件有改动时触发
  push:
    branches:
      - main
    paths:
      - 'health-checking.yak'
      - 'index.html'
      - '.github/workflows/deploy-yak-health-checking.yml'
      - 'deploy.sh'
      - 'scripts/install-certs.sh'
  
  # 允许手动触发
  workflow_dispatch:

# 确保同一时间只运行一个部署任务
concurrency:
  group: deploy-health-checking
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Print trigger information
        run: |
          echo "============================================"
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "============================================"
      
      - name: Download Yaklang Engine (v1.4.4-alpha1027)
        run: |
          echo "=== Downloading Yaklang Engine v1.4.4-alpha1027 ==="
          YAK_VERSION="1.4.4-alpha1027"
          YAK_URL="https://yaklang.oss-accelerate.aliyuncs.com/yak/${YAK_VERSION}/yak_linux_amd64"
          
          echo "Downloading from: $YAK_URL"
          # Download with reduced progress output (every 3 seconds approximately)
          wget --progress=dot:binary -O ./yak "$YAK_URL" 2>&1 | \
            awk '/[0-9]+%/{i++; if(i%3==0) print; next} {print}' || true
          
          if [ ! -f ./yak ]; then
            echo "ERROR: Failed to download yak engine"
            echo "Trying alternative URL..."
            YAK_URL="https://yaklang.oss-accelerate.aliyuncs.com/yak/${YAK_VERSION}/yak_linux_amd64"
            wget --progress=dot:binary -O ./yak "$YAK_URL" 2>&1 | \
              awk '/[0-9]+%/{i++; if(i%3==0) print; next} {print}' || exit 1
          fi
          
          chmod +x ./yak
          
          # 验证下载的文件
          echo ""
          echo "=== Downloaded file info ==="
          ls -lh ./yak
          file ./yak
          
          # 测试执行
          echo ""
          echo "=== Testing yak engine ==="
          ./yak version || echo "Note: yak version command may not be available in this version"
          
          echo ""
          echo "✓ Yaklang engine downloaded and verified successfully"
      
      - name: Prepare SSH key
        env:
          HEALTH_CHECKING_HOST_PRI: ${{ secrets.HEALTH_CHECKING_HOST_PRI }}
          HEALTH_CHECKING_HOST_ADDR: ${{ secrets.HEALTH_CHECKING_HOST_ADDR }}
        run: |
          echo "=== Preparing SSH deployment ==="
          
          if [ -z "$HEALTH_CHECKING_HOST_PRI" ] || [ -z "$HEALTH_CHECKING_HOST_ADDR" ]; then
            echo "ERROR: SSH credentials not found"
            echo "Please ensure HEALTH_CHECKING_HOST_PRI and HEALTH_CHECKING_HOST_ADDR secrets are set"
            exit 1
          fi
          
          # 创建私钥文件
          echo "$HEALTH_CHECKING_HOST_PRI" | tr -d '\r' > /tmp/pri
          chmod 600 /tmp/pri
          
          # 验证私钥格式
          if ! ssh-keygen -l -f /tmp/pri >/dev/null 2>&1; then
            echo "ERROR: Invalid SSH private key format"
            exit 1
          fi
          
          echo "✓ SSH key prepared successfully"
      
      - name: Deploy to remote server
        env:
          HEALTH_CHECKING_HOST_ADDR: ${{ secrets.HEALTH_CHECKING_HOST_ADDR }}
          LARK_BOT_NOTIFY_WEBHOOK: ${{ secrets.LARK_BOT_NOTIFY_WEBHOOK }}
        run: |
          echo "=== Deploying to remote server ==="
          echo "Target server: $HEALTH_CHECKING_HOST_ADDR"

          # 确保部署脚本有执行权限
          chmod +x ./deploy.sh

          # 准备 webhook 参数（移除前后空格）
          if [ -n "$LARK_BOT_NOTIFY_WEBHOOK" ]; then
            # 移除前后空格
            CLEANED_WEBHOOK=$(echo "$LARK_BOT_NOTIFY_WEBHOOK" | xargs)
            echo "Bot webhook configured for deployment"
            echo "Webhook length: ${#CLEANED_WEBHOOK}"
          else
            echo "No bot webhook configured"
            CLEANED_WEBHOOK=""
          fi

          # 确保服务器上的代码是最新的
          echo "Ensuring latest code on remote server..."
          ./yak ssh -H "$HEALTH_CHECKING_HOST_ADDR" -i /tmp/pri --command "
            REPO_URL='https://github.com/yaklang/yak-service-health-checking'
            REPO_DIR='/root/yak-service-health-checking'
            
            echo 'Checking repository status...'
            if [ -d \"\$REPO_DIR\" ]; then
              echo 'Repository directory exists, checking if it is a git repository...'
              cd \"\$REPO_DIR\"
              if [ -d '.git' ]; then
                echo 'Git repository found, pulling latest changes...'
                if command -v git >/dev/null 2>&1; then
                  git fetch origin
                  git reset --hard origin/main
                  echo '✓ Repository updated with git'
                else
                  echo 'Git command not found, using yak to update...'
                  cd /root
                  rm -rf \"\$REPO_DIR\"
                  yak -c \"git.Clone('\$REPO_URL', '\$REPO_DIR')\"
                  echo '✓ Repository cloned with yak'
                fi
              else
                echo 'Directory exists but not a git repository, re-cloning...'
                cd /root
                rm -rf \"\$REPO_DIR\"
                if command -v git >/dev/null 2>&1; then
                  git clone \"\$REPO_URL\" \"\$REPO_DIR\"
                  echo '✓ Repository cloned with git'
                else
                  yak -c \"git.Clone('\$REPO_URL', '\$REPO_DIR')\"
                  echo '✓ Repository cloned with yak'
                fi
              fi
            else
              echo 'Repository directory does not exist, cloning...'
              cd /root
              if command -v git >/dev/null 2>&1; then
                git clone \"\$REPO_URL\" \"\$REPO_DIR\"
                echo '✓ Repository cloned with git'
              else
                yak -c \"git.Clone('\$REPO_URL', '\$REPO_DIR')\"
                echo '✓ Repository cloned with yak'
              fi
            fi
            
            # 执行部署脚本
            echo 'Starting deployment...'
            cd \"\$REPO_DIR\"
            LARK_BOT_NOTIFY_WEBHOOK='$CLEANED_WEBHOOK' ./deploy.sh
          "

          if [ $? -ne 0 ]; then
            echo "ERROR: Deployment failed"
            exit 1
          fi

          echo "✓ Deployment completed successfully"
      
      - name: Verify deployment
        env:
          HEALTH_CHECKING_HOST_ADDR: ${{ secrets.HEALTH_CHECKING_HOST_ADDR }}
        run: |
          echo "=== Verifying deployment ==="
          
          # 等待服务启动
          echo "Waiting for service to start..."
          sleep 10
          
          # 通过 SSH 验证服务状态
          ./yak ssh -H "$HEALTH_CHECKING_HOST_ADDR" -i /tmp/pri --command "curl -f http://127.0.0.1:9901 >/dev/null 2>&1 && echo 'Service is running' || echo 'Service verification failed'"
          
          if [ $? -ne 0 ]; then
            echo "WARNING: Service verification failed, but deployment may still be successful"
            echo "Please check the service status manually"
          else
            echo "✓ Service verification completed"
          fi
      
      - name: Install SSL Certificate (Optional)
        if: ${{ vars.ENABLE_SSL == 'true' }}
        env:
          HEALTH_CHECKING_HOST_ADDR: ${{ secrets.HEALTH_CHECKING_HOST_ADDR }}
          SSL_DOMAIN: ${{ vars.SSL_DOMAIN }}
          SSL_EMAIL: ${{ vars.SSL_EMAIL }}
        run: |
          echo "=== Installing SSL Certificate ==="
          
          if [ -z "$SSL_DOMAIN" ] || [ -z "$SSL_EMAIL" ]; then
            echo "WARNING: SSL_DOMAIN or SSL_EMAIL not configured, skipping SSL installation"
            echo "To enable SSL, set the following repository variables:"
            echo "  - Variable: ENABLE_SSL=true"
            echo "  - Variable: SSL_DOMAIN=your-domain.com"
            echo "  - Variable: SSL_EMAIL=your-email@example.com"
            exit 0
          fi
          
          echo "Installing SSL certificate for domain: $SSL_DOMAIN"
          
          # 通过 SSH 执行证书安装脚本
          ./yak ssh -H "$HEALTH_CHECKING_HOST_ADDR" -i /tmp/pri --command "cd /root/yak-service-health-checking && ./scripts/install-certs.sh --domain '$SSL_DOMAIN' --port 9901 --email '$SSL_EMAIL' -y"
          
          if [ $? -eq 0 ]; then
            echo "✓ SSL certificate installation completed"
          else
            echo "WARNING: SSL certificate installation failed, but deployment continues"
          fi
      
      - name: Cleanup
        if: always()
        run: |
          echo "=== Cleaning up ==="
          rm -f /tmp/pri
          echo "✓ Cleanup completed"
      
      - name: Summary
        if: success()
        run: |
          echo "## ✅ Health Checking Service Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The YAK Health Checking service has been successfully deployed to the remote server." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- Service Name: \`yak-health-checking\`" >> $GITHUB_STEP_SUMMARY
          echo "- Port: \`9901\`" >> $GITHUB_STEP_SUMMARY
          echo "- Script: \`health-checking.yak\`" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Directory: \`/root/yak-service-health-checking\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Info" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Actor: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Access Information" >> $GITHUB_STEP_SUMMARY
          echo "- HTTP: http://\${server-ip}:9901" >> $GITHUB_STEP_SUMMARY
          if [ "${{ vars.ENABLE_SSL }}" = "true" ] && [ -n "${{ vars.SSL_DOMAIN }}" ]; then
            echo "- HTTPS: https://${{ vars.SSL_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 SSL Configuration" >> $GITHUB_STEP_SUMMARY
          if [ "${{ vars.ENABLE_SSL }}" = "true" ]; then
            echo "- SSL Enabled: ✅" >> $GITHUB_STEP_SUMMARY
            echo "- Domain: ${{ vars.SSL_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- SSL Enabled: ❌" >> $GITHUB_STEP_SUMMARY
            echo "- To enable SSL, configure ENABLE_SSL, SSL_DOMAIN, and SSL_EMAIL as repository variables" >> $GITHUB_STEP_SUMMARY
          fi
